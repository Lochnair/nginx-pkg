# .github/workflows/build-nginx.yml
name: Build NGINX packages

on:
  push:
    paths:
      - ".meta/**"
  workflow_dispatch:
    inputs:
      flavor:
        description: "stable or mainline"
        type: choice
        required: false
        default: stable
        options: [stable, mainline]
      tag:
        description: "Override pkg-oss tag (e.g., 1.28.1-1). Leave empty to read from file."
        required: false
        default: ""
      targets:
        description: "Space-separated pkg-oss make targets (default: base + all modules)"
        required: false
        default: ""

permissions:
  contents: read

# Avoid overlapping duplicate builds per ref/flavor
concurrency:
  group: build-nginx-${{ github.ref }}-${{ inputs.flavor || 'auto' }}
  cancel-in-progress: false

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      flavor: ${{ steps.out.outputs.flavor }}
    steps:
      - uses: actions/checkout@v4
      - id: out
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED=$(git diff --name-only HEAD~1 || true)
            if echo "$CHANGED" | grep -q ".meta/nginx-stable.txt"; then
              F=stable
            elif echo "$CHANGED" | grep -q ".meta/nginx-mainline.txt"; then
              F=mainline
            else
              F=""
            fi
          else
            F=""
          fi
          echo "flavor=$F" >> "$GITHUB_OUTPUT"

  build:
    needs: detect
    # flavor: input > detected > stable
    env:
      FLAVOR: ${{ inputs.flavor || needs.detect.outputs.flavor || 'stable' }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: debian-12
            container_image: debian:12
          - distro: debian-13
            container_image: debian:13

    container:
      image: ${{ matrix.container_image }}

    steps:
      - name: Install build tooling in container
        run: |
          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates curl git jq make build-essential devscripts equivs \
            dpkg-dev debhelper quilt lsb-release xsltproc file libxml2-utils
          update-ca-certificates

      - uses: actions/checkout@v4

      - name: Resolve tag and series
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          # tag: input > file
          if [ -n "${{ inputs.tag }}" ]; then
            TAG="${{ inputs.tag }}"
          else
            case "${FLAVOR}" in
              stable)   FILE=".meta/nginx-stable.txt" ;;
              mainline) FILE=".meta/nginx-mainline.txt" ;;
              *) echo "Unknown flavor '${FLAVOR}'"; exit 1 ;;
            esac
            TAG=$(tr -d '\n' < "$FILE" | xargs)
          fi
          [ -n "$TAG" ] || { echo "No tag resolved"; exit 1; }
          NVER="${TAG%-*}"        # 1.28.1
          SERIES="${NVER%.*}"     # 1.28
          echo "tag=$TAG"       >> "$GITHUB_OUTPUT"
          echo "nver=$NVER"     >> "$GITHUB_OUTPUT"
          echo "series=$SERIES" >> "$GITHUB_OUTPUT"
          echo "Resolved $FLAVOR tag: $TAG (series $SERIES)"

      - name: Clone pkg-oss
        run: |
          git clone --branch "${{ steps.ver.outputs.tag }}" --depth=1 https://github.com/nginx/pkg-oss.git
          echo "Using pkg-oss tag: ${{ steps.ver.outputs.tag }}"

      - name: Verify upstream tag exists
        shell: bash
        run: |
          set -euo pipefail
          code=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/nginx/pkg-oss/git/ref/tags/${{ steps.ver.outputs.tag }}")
          if [ "$code" != "200" ]; then
            echo "Upstream tag ${{ steps.ver.outputs.tag }} not visible yet (HTTP $code). Try later."
            exit 1
          fi

      - name: Build Debian packages (base + modules like upstream CI)
        working-directory: pkg-oss/debian
        shell: bash
        run: |
          set -euo pipefail
          # Derive default target list like upstream:
          # targets="base module-<each from list-all-modules>"
          if [ -n "${{ inputs.targets }}" ]; then
            targets="${{ inputs.targets }}"
          else
            targets="base"
            while read -r mod rest; do
              targets="$targets module-$mod"
            done < <(make list-all-modules)
          fi

          echo "Targets: $targets"

          # For each target:
          for t in $targets; do
            echo "::group::Prep $t"
            make "rules-$t"
            NGINX_VERSION="${{ steps.ver.outputs.nver }}"
            ctrl="debuild-$t/nginx-${NGINX_VERSION}/debian/control"
            if [ ! -f "$ctrl" ]; then
              echo "Missing control file for $t at $ctrl"; exit 1
            fi
            # Install build-deps like upstream (mk-build-deps)
            mk-build-deps --install --tool="apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes" "$ctrl"
            echo "::endgroup::"

            echo "::group::Build $t"
            make "$t"
            echo "::endgroup::"
          done

          # Collect .deb artifacts
          mkdir -p ../../out
          find debuild-* -name "*.deb" -print -exec cp -v {} ../../out/ \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-${{ env.FLAVOR }}-${{ steps.ver.outputs.tag }}-${{ matrix.distro }}
          path: out/
          if-no-files-found: error
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
  
    steps:
      - name: Download all build artifacts
      # This grabs every artifact from all matrix rows into ./dist/<artifact-name>
        uses: actions/download-artifact@v4
        with:
          path: dist
  
      - name: Resolve flavor and tag from artifact names
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          # Expect artifact dirs like: nginx-<flavor>-<tag>-<distro>
          first_dir=$(find dist -mindepth 1 -maxdepth 1 -type d | head -n1)
          [ -n "$first_dir" ] || { echo "No artifacts found"; exit 1; }
  
          base=$(basename "$first_dir")
          # Split on '-' with flavor in field 2 and tag in field 3
          # Example: nginx-stable-1.28.1-1-debian-12
          IFS='-' read -r _ flavor tag_rest <<<"$base"
          # tag_rest may contain additional dashes if your tag ever grows; handle safely:
          # cut the last two dash-separated fields for distro name and version, whatever you used.
          # Here we assume tag is exactly one dash (e.g. 1.28.1-1). Adjust if you change naming.
          tag=$(echo "$base" | sed -E 's/^nginx-[^-]+-([0-9]+\.[0-9]+\.[0-9]+-[0-9]+)-.*/\1/')
  
          if [ -z "$tag" ] || [ -z "$flavor" ]; then
            echo "Could not parse flavor/tag from $base"
            exit 1
          fi
  
          echo "flavor=$flavor" >> "$GITHUB_OUTPUT"
          echo "tag=$tag"       >> "$GITHUB_OUTPUT"
          echo "Flavor=$flavor  Tag=$tag"
  
      - name: Gather .deb files and checksums
        id: gather
        shell: bash
        run: |
          shopt -s globstar nullglob
          count=$(ls dist/**/*.deb 2>/dev/null | wc -l || true)
          [ "$count" -gt 0 ] || { echo "No .deb files found"; exit 1; }
          (cd dist && find . -type f -name '*.deb' -print0 | xargs -0 sha256sum) > dist/SHA256SUMS
          echo "files=true" >> "$GITHUB_OUTPUT"
  
      - name: Create or update GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail
          flavor="${{ steps.resolve.outputs.flavor }}"
          tag="${{ steps.resolve.outputs.tag }}"
          reltag="nginx-${flavor}-${tag}"
          title="NGINX ${flavor} ${tag}"
  
          if ! gh release view "$reltag" >/dev/null 2>&1; then
            notes=$(cat <<EOF
          Packages for ${title}
          
          - Upstream packaging: nginx/pkg-oss @ ${tag}
          - Flavor: ${flavor}
          
          Artifacts include .deb packages for all built distros plus SHA256SUMS.
          EOF
          )
            gh release create "$reltag" --title "$title" --notes "$notes"
          fi
  
          gh release upload "$reltag" dist/**/*.deb dist/SHA256SUMS --clobber
